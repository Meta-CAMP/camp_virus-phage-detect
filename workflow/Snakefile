'''Workflow for the CAMP virus-phage-detect module.'''


from contextlib import redirect_stderr
import os
from os.path import abspath, basename, dirname, join
import pandas as pd
#from shutil import copy
from utils import Workflow_Dirs, ingest_samples


# Load and/or make the working directory structure
dirs = Workflow_Dirs(config['work_dir'], 'virus-phage-detect')


# Load sample names and input files 
SAMPLES = ingest_samples(config['samples'], dirs.TMP)


# Specify the location of any external resources and scripts
dirs_ext = config['ext']
dirs_scr = join(dirs_ext, 'scripts')
vibrant_db = join(config['db_path'], 'VIBRANT', 'databases')
virsorter_db = join(config['db_path'], 'virsorter')
checkv_db = join(config['db_path'], 'checkv-db-v1.5')


# --- Workflow output --- #

if config['option'] != '':
    option = '--' + config['option'],
else:
    option = ''


rule all:
	input:
		expand(join(dirs.OUT, 'final_reports','{sample}_quality_summary.tsv'), sample=SAMPLES)


rule metaspades_assembly:
    input:
        fwd = join(dirs.TMP,'{sample}_1.fastq.gz'),
        rev = join(dirs.TMP,'{sample}_2.fastq.gz'),
    output:
        ctg = join(dirs.OUT,'0_metaspades','{sample}','scaffolds.fasta'),
        assembly_graph = join(dirs.OUT,'0_metaspades','{sample}','K55','assembly_graph_with_scaffolds.gfa'),
    log:
        join(dirs.LOG, 'metaspades', '{sample}.out'),
    conda:
        join(config['env_yamls'], 'assemblers.yaml'),
    threads:
        config['assembly_threads'],
    resources:
        mem_mb = config['assembly_mem_mb'],
    params:
        out_dir = join(dirs.OUT,'0_metaspades','{sample}'),
        option = option,
    shell:
        """
        if [ -f "{params.out_dir}/K33/assembly_graph.fastg" ]; then
            spades.py --only-assembler {params.option} --restart-from k55 -o {params.out_dir} -t {threads} -m {resources.mem_mb} >> {log} 2>&1 # Restart from k = 55
        elif [ -f "{params.out_dir}/K21/assembly_graph.fastg" ]; then
            spades.py --only-assembler {params.option} --restart-from k33 -o {params.out_dir} -t {threads} -m {resources.mem_mb} >> {log} 2>&1 # Restart from k = 33
        elif [ -f "{params.out_dir}/corrected.yaml" ]; then
            spades.py --only-assembler {params.option} --restart-from k21 -o {params.out_dir} -t {threads} -m {resources.mem_mb} >> {log} 2>&1 # Restart from k = 21
        else
            spades.py --only-assembler {params.option} -t {threads} -m {resources.mem_mb} -1 {input.fwd} -2 {input.rev} -o {params.out_dir} > {log} 2>&1
        fi
        """    


rule viralverify:
	input:
		fwd = join(dirs.TMP,'{sample}_1.fastq.gz'),
		rev = join(dirs.TMP,'{sample}_2.fastq.gz'),
		assembly_graph = join(dirs.OUT,'0_metaspades','{sample}','K55','assembly_graph_with_scaffolds.gfa'),
	output:
		join(dirs.OUT,'1.1_viralverify','{sample}', 'scaffolds.fasta'),
	log:
		join(dirs.LOG, 'viralverify', '{sample}.out'),
	conda:
		join(config['env_yamls'], 'assemblers.yaml'),
	threads:
		config['assembly_threads'],
	resources:
		mem_mb = config['assembly_mem_mb'],
	params:
		out_dir = join(dirs.OUT,'1.1_viralverify','{sample}'),
		option = option,
	shell:
		"""
		spades.py --metaviral --only-assembler -t {threads} -m {resources.mem_mb} -1 {input.fwd} -2 {input.rev} \
			--assembly-graph {input.assembly_graph} -k55 -o {params.out_dir} > {log} 2>&1 
		"""


rule vibrant:
	# Runs vibrant.
	# input is a set of contigs generated by the assembler in fasta format
	# output is a folder containing temporary files and subfolders with a fasta file containing identified viruses in fasta format
	# to do
		# specify output file that terminates the rule
		# add code that eliminates temporary files that won't be processed
	input:
		ctg = join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
		flag = join(dirs_ext,'vibrant.db_setup'),
	output:
		join(dirs.OUT,  '1.2_vibrant','{sample}','vibrant_detected_viruses.txt'),
	log:                                 
		join(dirs.LOG, 'vibrant', '{sample}.out'),
	conda:
		join(config['env_yamls'], 'vibrant.yaml'),
	threads: config['vibrant_threads'],
	params:
		out_dir = join(dirs.OUT, '1.2_vibrant','{sample}'),
		vibrant_db = vibrant_db,
	shell:
		"""
		VIBRANT_run.py -i {input.ctg} -t {threads} -d {params.vibrant_db} -folder {params.out_dir} > {log} 2>&1
		cat {params.out_dir}/*/*/*fna | grep ">" | sed "s/_fragment_1//g;s/>//g" >  {output}
		"""


rule virsorter:
	# Runs virsorter.
		# input is a set of contigs generated by the assembler in fasta formaT
		# output is a folder containing temporary files and subfolders with a fasta file containing identified viruses in fasta format 
	# to do
		# add code that eliminates temporary files that won't be processed
		# add min_length to correct config files
		# add conda load
	input:
		ctg = join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
		flag = join(dirs_ext, 'virsorter.db_setup'),
	output:
		join(dirs.OUT, '1.3_virsorter','{sample}','virsorter_detected_viruses.txt'),
	log:
		join(dirs.LOG, 'virsorter', '{sample}.out'),
	conda:
		join(config['env_yamls'], 'virsorter2.yaml'),
	threads: config['virsorter_threads'],
	params: 
		virsorter_db = virsorter_db,
		out_dir = join(dirs.OUT,  '1.3_virsorter','{sample}'),
		min_len = config['min_ctg_len'],
	shell:
		"""
		virsorter run -w {params.out_dir} -d {params.virsorter_db} -i {input.ctg} --min-length {params.min_len} -j {threads} > {log} 2>&1
		cat {params.out_dir}/final-viral-combined.fa | grep ">" | sed "s/_fragment_1//g;s/>//g" | cut -f1 -d "|" > {output}
		"""


rule virfinder:
	# Runs virfinder.
	# input is a set of contigs generated by the assembler in fasta format
	# output is a txt file containing the contig headers of identified viruses 
	# to do
		# add conda load
	input:
		join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
	output:
		join(dirs.OUT, '1.4_virfinder','{sample}','virfinder_detected_viruses.txt'),
	conda:
		join(config['env_yamls'], 'virfinder.yaml'),
	threads: config['virsorter_threads'],
	params:
		virfinder_scr  = join(dirs_scr, 'virfinder_script.r'),
		parse_scr = join(dirs_scr, 'virfinder_results_parse.sh'),
		out_dir = join(dirs.OUT, '1.4_virfinder','{sample}'),
	shell:
		"""
		cp {input} {params.out_dir}/contigs.fa
		Rscript {params.virfinder_scr} {params.out_dir} contigs.fa virfinder_output.txt
		bash {params.parse_scr} {params.out_dir}/virfinder_output.txt {output}
		"""


rule concat_inferences:
	input:
		fa_assembly =     join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
		fa_viralverify =  join(dirs.OUT,'1.1_viralverify','{sample}','scaffolds.fasta'),
		fa_vibrant = 	  join(dirs.OUT,'1.2_vibrant'    ,'{sample}','vibrant_detected_viruses.txt'),
		fa_virsorter = 	  join(dirs.OUT,'1.3_virsorter',  '{sample}','virsorter_detected_viruses.txt'),
		fa_virfinder = 	  join(dirs.OUT,'1.4_virfinder',  '{sample}','virfinder_detected_viruses.txt'),
	output:
		join(dirs.OUT,'2_dereplication','{sample}','contigs_derep.fa'),
	params:
		out_ids = join(dirs.OUT, '2_dereplication','{sample}','merged_ids.txt'),
		merged_fa = join(dirs.OUT, '2_dereplication','{sample}','tmp_contigs.fa'),
		out_dir =  join(dirs.OUT, '2_dereplication','{sample}'),
		processing_scr  = join(dirs_scr, 'faSomeRecords.py'),
	shell:
		"""
		cat {input.fa_vibrant} {input.fa_virsorter} {input.fa_virfinder} | sort | uniq > {params.out_ids} # TODO check outputs- does this do what we think it does? 
		python {params.processing_scr} -f {input.fa_assembly} -l {params.out_ids} --outfile {params.merged_fa}
		cat {input.fa_viralverify} {params.merged_fa} > {output}
		"""


rule dereplication:
	input:
		join(dirs.OUT,'2_dereplication','{sample}','contigs_derep.fa'),
	output:
		join(dirs.OUT, '2_dereplication','{sample}','contigs_derep_95-70.fna'),
	params:
		cluster_scr = join(dirs_scr, 'Cluster_genomes.pl'),
	shell:
		"""
		{params.cluster_scr} -f {input} -c 70 -i 95 # TODO what do these mean? Make toggle-able?
		"""


rule checkv:
	input:
		ctg = join(dirs.OUT, '2_dereplication','{sample}','contigs_derep_95-70.fna'),
		flag =  join(dirs_ext,'checkv.db_setup'),
	output:
		join(dirs.OUT, 'final_reports','{sample}_quality_summary.tsv'),
	log:
		join(dirs.LOG, 'checkv', '{sample}.out'),
	conda:
		join(config['env_yamls'], 'checkv.yaml'),
	threads: config['checkv_threads'],
	params:
		out_dir = join(dirs.OUT, '3_checkv','{sample}'),
		checkv_db = checkv_db,
	shell:
		"""
		checkv end_to_end {input.ctg} {params.out_dir} -t {threads} -d {params.checkv_db} > {log} 2>&1 
		cp {params.out_dir}/quality_summary.tsv {output}
		"""


rule vibrant_db_setup: # HOW DOES IT behave for several samples?
	output:
		join(dirs_ext,'vibrant.db_setup'),
	conda:
		join(config['env_yamls'], 'vibrant.yaml'),
	threads: config['installation_threads'],
	params:
		db_path = config['db_path'],
	shell:
		"""
		if [ ! -f {params.db_path}/VIBRANT/databases/KEGG_profiles_prokaryotes.HMM ]; then 
			cd {params.db_path}
			git clone https://github.com/AnantharamanLab/VIBRANT.git
			cd VIBRANT/databases
			python VIBRANT_setup.py
			else :; 
		fi
		touch {output}
		"""


rule virsorter_db_setup: # HOW DOES IT behave for several samples?
	output:
		join(dirs_ext, 'virsorter.db_setup'),
	conda:
		join(config['env_yamls'], 'virsorter2.yaml'),
	threads: config['installation_threads'],
	params:
		db_path = config['db_path'],
	shell:
		"""
		if [ ! -d {params.db_path}/virsorter ];
			mkdir -p {params.db_path}/virsorter
			then virsorter setup -d {params.db_path}/virsorter -j 4; 
			else :;
		fi

		touch {output}
		"""


rule checkv_db_setup:
	output:
		join(dirs_ext,'checkv.db_setup'),
	conda:
		join(config['env_yamls'], 'checkv.yaml'),
	threads: config['installation_threads'],
	params:
		db_path = config['db_path'],
	shell:
		"""
		if [ ! -f {params.db_path}/checkv-db/hmm_db/checkv_hmms.tsv ]; then 
			cd {params.db_path}
			checkv download_database {params.db_path}
			else :; 
		fi
		touch {output}
		"""