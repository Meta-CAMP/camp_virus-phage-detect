'''Workflow for the CAMP virus-phage-detect module.'''


from contextlib import redirect_stderr
import os
from os.path import abspath, basename, dirname, join
import pandas as pd
#from shutil import copy
from utils import Workflow_Dirs, ingest_samples


# Load and/or make the working directory structure
dirs = Workflow_Dirs(config['work_dir'], 'virus-phage-detect')



# Load sample names and input files 
SAMPLES = ingest_samples(config['samples'], dirs.TMP)


# Specify the location of any external resources and scripts
dirs_ext = join(dirname(abspath(__file__)), 'ext')
dirs_scr = join(dirs_ext, 'scripts')

path=os.path.abspath(os.getcwd())
dirs_scr=path+"/workflow/ext/scripts/"

print (SAMPLES)

# --- Workflow output --- #

if config['option'] != '':
    option = '--' + config['option'],
else:
    option = ''

rule all:
	input:
		#join(dirs.OUT,  'orfs.fa')
		#fa = join(dirs.OUT,  '{sample}_orfs.fa')
		#fa = join(dirs.OUT, 'orfs.fa')
		#join(dirs.OUT, 'virus-phage-detect_finished') 
		#expand(join(dirs.OUT, '_dereplication','{sample}','virsorter_virfinder_vibrant_contigs.fa'),sample=SAMPLES),
		expand(join(dirs.OUT, '3_checkv','{sample}','quality_summary.tsv'),sample=SAMPLES),


rule metaspades_assembly:
    input:
        fwd = join(dirs.TMP,'{sample}_1.fastq.gz'),
        rev = join(dirs.TMP,'{sample}_2.fastq.gz'),
    output:
        join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
    log:
        join(dirs.LOG, '0_metaspades', '{sample}.out'),
    conda:
        join(config['env_yamls'], 'assemblers.yaml'),
    threads:
        config['assembly_threads'],
    resources:
        mem_mb = config['assembly_mem_mb'],
    params:
        out_dir = join(dirs.OUT,'0_metaspades','{sample}'),
        option = option,
    shell:
        """
        if [ -f "{params.out_dir}/K33/assembly_graph.fastg" ]; then
            spades.py --only-assembler {params.option} --restart-from k55 -o {params.out_dir} -t {threads} -m {resources.mem_mb} # Restart from k = 55
        elif [ -f "{params.out_dir}/K21/assembly_graph.fastg" ]; then
            spades.py --only-assembler {params.option} --restart-from k33 -o {params.out_dir} -t {threads} -m {resources.mem_mb} # Restart from k = 33
        elif [ -f "{params.out_dir}/corrected.yaml" ]; then
            spades.py --only-assembler {params.option} --restart-from k21 -o {params.out_dir} -t {threads} -m {resources.mem_mb} # Restart from k = 21
        else
            spades.py --only-assembler {params.option} -t {threads} -m {resources.mem_mb} -1 {input.fwd} -2 {input.rev} -o {params.out_dir} 
        fi
        """    


rule viralverify:
	input:
		fwd = join(dirs.TMP,'{sample}_1.fastq.gz'),
		rev = join(dirs.TMP,'{sample}_2.fastq.gz'),
		ctg = join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
		#assembly_folder =  join(dirs.OUT,'0_metaspades','{sample}'), #, 'K55','assembly_graph_with_scaffolds.gfa'),
	output:
		join(dirs.OUT,'1.1_viralverify','{sample}', 'scaffolds.fasta'),
	log:
		join(dirs.LOG, '1.1_viralverify', '{sample}.out'),
	conda:
		join(config['env_yamls'], 'assemblers.yaml'),
	threads:
		config['assembly_threads'],
	resources:
		mem_mb = config['assembly_mem_mb'],
	params:
		out_dir = join(dirs.OUT,'1.1_viralverify','{sample}'),
		assembly_graph = join(dirs.OUT,'0_metaspades','{sample}','K55','assembly_graph_with_scaffolds.gfa'),
		option = option,
	shell:
		"""
		spades.py --metaviral --only-assembler -t {threads}  -m {resources.mem_mb}  -1 {input.fwd} -2 {input.rev} --assembly-graph {params.assembly_graph}  -k55  -o  {params.out_dir} 

		# template #
		###spades.py --only-assembler {params.option} -t {threads} -m {resources.mem_mb} -1 {input.fwd} -2 {input.rev}			  -o {params.out_dir} 

		"""    


rule vibrant:
	# Runs vibrant.
	# input is a set of contigs generated by the assembler in fasta format
	# output is a folder containing temporary files and subfolders with a fasta file containing identified viruses in fasta format
	# to do
		# specify output file that terminates the rule
		# add code that eliminates temporary files that won't be processed
	input:
		ctg = join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
		flag = join(dirs.OUT, '.databases_setup','vibrant')
		#ctg = join(dirs.TMP, '{sample}.fasta'),
	output:
		vibrant_out =  join(dirs.OUT,  '1.2_vibrant','{sample}','vibrant_detected_viruses.txt')
	log:                                 
		join(dirs.LOG, '1.2_vibrant', '{sample}.out'),
	conda:
		join(config['env_yamls'], 'vibrant.yaml'),
	threads: config['vibrant_rule_threads'],
	params:
		vibrant_script  = join(dirs_scr, 'VIBRANT_run.py'),
		out_dir = join(dirs.OUT, '1.2_vibrant','{sample}'),
		databases_path = config['databases_path_new_way'],
	shell:
		"""
		# setup database in case it doesn't exist!
		#bin="$(which VIBRANT_run.py | rev |  cut -c 15- | rev )"
		#if [ ! -f {params.databases_path}/VIBRANT/databases/KEGG_profiles_prokaryotes.HMM ]; then 
		#	mkdir -p {params.databases_path}
		#	cd {params.databases_path}
		#	git clone https://github.com/AnantharamanLab/VIBRANT.git
		#	cd VIBRANT/databases
		#	python VIBRANT_setup.py
		#	cd -
		#	else :; 
		#fi
		
		VIBRANT_run.py -i {input.ctg} -t {threads} -d {params.databases_path}/VIBRANT/databases/ -folder {params.out_dir}
		cat {params.out_dir}/*/*/*fna | grep ">" | sed "s/_fragment_1//g;s/>//g" >  {params.out_dir}/vibrant_detected_viruses.txt
		touch {output.vibrant_out}
		"""

rule virsorter:
	# Runs virsorter.
		# input is a set of contigs generated by the assembler in fasta formaT
		# output is a folder containing temporary files and subfolders with a fasta file containing identified viruses in fasta format 
	# to do
		# add code that eliminates temporary files that won't be processed
		# add min_length to correct config files
		# add conda load
	input:
		ctg = join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
		#ctg = join(dirs.TMP, '{sample}.fasta'),
	output:
		virsorter_out = join(dirs.OUT, '1.3_virsorter','{sample}','virsorter_detected_viruses.txt'),
	log:
		join(dirs.LOG, '1.3_virsorter', '{sample}.out'),
	conda:
		join(config['env_yamls'], 'virsorter2.yaml'),
	threads: config['virsorter_rule_threads'],
	params: 
		databases_path = config['databases_path_new_way'],
		out_dir = join(dirs.OUT,  '1.3_virsorter','{sample}'),
		min_length = config['virsorter_min_contig_length'],
	shell:
		"""
		# setup database in case it doesn't exist!
		#db_path="$(echo "$(which virsorter)" | rev |  cut -c 10- | rev )database"
		#if [ ! -d "$db_path" ]; then virsorter setup -d "$db_path" -j 4; else :; fi

		virsorter run -w {params.out_dir} -d {params.databases_path} -i {input.ctg} --min-length {params.min_length} -j {threads}
		#cp {params.out_dir}/final-viral-combined.fa {params.out_dir}/virsorter_detected_viruses.fasta
		cat {params.out_dir}/final-viral-combined.fa | grep ">" | sed "s/_fragment_1//g;s/>//g" | cut -f1 -d "|" > {params.out_dir}/virsorter_detected_viruses.txt	
	
		"""

rule virfinder:
	# Runs virfinder.
	# input is a set of contigs generated by the assembler in fasta format
	# output is a txt file containing the contig headers of identified viruses 
	# to do
		# add conda load
	input:
		ctg = join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
		#ctg = join(dirs.TMP, '{sample}.fasta'),
	output:
		virfinder_out_txt = join(dirs.OUT, '1.4_virfinder','{sample}','virfinder_detected_viruses.txt'),
	log:
		join(dirs.LOG, '1.4_virfinder', '{sample}.out'),
	conda:
		join(config['env_yamls'], 'virfinder.yaml'),
	threads: config['virsorter_rule_threads'],
	params:
		virfinder_script  = join(dirs_scr, 'virfinder_script.r'),
		virfinder_parse_script = join(dirs_scr, 'virfinder_results_parse.sh'),
		out_dir = join(dirs.OUT, '1.4_virfinder','{sample}'),
		
	shell:
		"""
		#### Rscript $CONDA_PREFIX/VirFinder/virfinder_script.r /storage/tools/virfinder ZRH_15-scaffolds.fasta virfinder_output.tsv
		
		cp {input.ctg} {params.out_dir}/contigs.fa
		Rscript {params.virfinder_script} {params.out_dir} contigs.fa virfinder_output.txt
		bash {params.virfinder_parse_script} {params.out_dir}/virfinder_output.txt {output.virfinder_out_txt}
		"""


rule join_viral_identification_tools:
	input:
		fa_assembly =     expand(join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),sample=SAMPLES),
		fa_viralverify =  expand(join(dirs.OUT,'1.1_viralverify','{sample}','scaffolds.fasta'),sample=SAMPLES),
		fa_vibrant = 	  expand(join(dirs.OUT,'1.2_vibrant'    ,'{sample}','vibrant_detected_viruses.txt'),sample=SAMPLES),
		fa_virsorter = 	  expand(join(dirs.OUT,'1.3_virsorter',  '{sample}','virsorter_detected_viruses.txt'),sample=SAMPLES),	
		fa_virfinder = 	  expand(join(dirs.OUT,'1.4_virfinder',  '{sample}','virfinder_detected_viruses.txt'),sample=SAMPLES),	
	output:
		#out= expand(join(dirs.OUT, '2_dereplication','{sample}','virsorter_virfinder_vibrant_contigs.fa'),sample=SAMPLES),
		out= expand(join(dirs.OUT, '2_dereplication','{sample}','viral_contigs_dereplicated_95-70.fa'),sample=SAMPLES),
	#log:
#		join(dirs.LOG, '2_dereplication', '{sample}.out'),
	params:
		out_ids= expand(join(dirs.OUT, '2_dereplication','{sample}','virsorter_virfinder_vibrant_ids.txt'),sample=SAMPLES),
		joined_tools = expand(join(dirs.OUT, '2_dereplication','{sample}','virsorter_virfinder_vibrant_contigs.fa'),sample=SAMPLES),
		out_dir =  expand(join(dirs.OUT, '2_dereplication','{sample}'),sample=SAMPLES),
		faSomeRecords  = join(dirs_scr, 'faSomeRecords.py'),
		clustergenome = join(dirs_scr, 'Cluster_genomes.pl'),
	shell:
		"""
		cat {input.fa_vibrant} {input.fa_virsorter} {input.fa_virfinder} | sort | uniq > {params.out_ids}
		python {params.faSomeRecords} -f {input.fa_assembly} -l {params.out_ids} --outfile  {params.joined_tools}
		cp {input.fa_viralverify} {params.out_dir}/viralverify.fa
		cat {params.out_dir}/viralverify.fa {params.joined_tools} > {params.out_dir}/all_viral_contigs.fa

		{params.clustergenome} -f {params.out_dir}/all_viral_contigs.fa -c 70 -i 95 

		cp {params.out_dir}/all_viral_contigs.fa {output.out}

		#touch {output}
		"""


rule checkv:
	input:
		dereplicated_viruses = expand(join(dirs.OUT, '2_dereplication','{sample}','viral_contigs_dereplicated_95-70.fa'),sample=SAMPLES),
	output:
		out= expand(join(dirs.OUT, '3_checkv','{sample}','quality_summary.tsv'),sample=SAMPLES),
	params:
		output_folder = expand(join(dirs.OUT, '3_checkv','{sample}'),sample=SAMPLES),
	#log:
	#	join(dirs.LOG, 'checkv', '{sample}.out'),
	conda:
		join(config['env_yamls'], 'checkv.yaml'),
	threads: config['checkv_rule_threads'],
	shell:
		"""
		checkv end_to_end {input.dereplicated_viruses} {params.output_folder} -t  {threads} -d /storage/databases/checkv-db-v1.5
		"""

rule vibrant_database_setup: # HOW DOES IT behave for several samples?
	output:
		flag = join(dirs.OUT, '.databases_setup','vibrant'),
	params:
		db_path = config['databases_path_new_way'],
	conda:
		join(config['env_yamls'], 'vibrant.yaml'),
	threads: config['installation_threads'],
	shell:
		"""
		if [ ! -f {params.db_path}/VIBRANT/databases/KEGG_profiles_prokaryotes.HMM ]; then 
			mkdir -p {params.db_path}
			cd {params.db_path}
			git clone https://github.com/AnantharamanLab/VIBRANT.git
			cd VIBRANT/databases
			python VIBRANT_setup.py
		#	cd -
			else :; 
		fi
		touch {output.flag}
		"""

rule virsorter_database_setup: # HOW DOES IT behave for several samples?
	output:
		flag = join(dirs.OUT, '.databases_setup','virsorter'),
	params:
		db_path = config['databases_path_new_way'],
	conda:
		join(config['env_yamls'], 'virsorter2.yaml'),
	threads: config['installation_threads'],
	shell:
		"""
		#db_path="$(echo "$(which virsorter)" | rev |  cut -c 10- | rev )database"
		if [ ! -d {params.db_path}/virsorter ];
			mkdir -p {params.db_path}/virsorter
			then virsorter setup -d "$db_path"/virsorter -j 4; 
			else :;
		fi

		touch {output.flag}
		"""

#rule make_config:
#    input:
#        workflow_mode, # Intermediate input files (may be determined by workflow mode)
#    output:
#        csv = join(dirs.OUT, 'final_reports', 'samples.csv'),
#        txt = join(dirs.OUT, 'final_reports', 'report.txt'),
#    run:
#        # Collate workflow outputs and i) summarize them in a new samples.csv for downstream analysis and/or ii) copy them to 'final_reports' for external data analysis
#        copy(str(input[0]), str(output.txt))
#        dct = {}
#        for i in params.samples:
#            s = i.split('/')[-1]
#            if s not in dct: dct[s] = {}
#            dct[str(input[1][s])]['illumina_fwd'] = s
#        df = pd.DataFrame.from_dict(dct, orient ='index')
#        df.reset_index(inplace = True)
#        df.rename(columns = {'index': 'sample_name'}, inplace = True)
#        df.to_csv(str(output.csv), index = False)




