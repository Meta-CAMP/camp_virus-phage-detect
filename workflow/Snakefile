'''Workflow for the CAMP virus-phage-detect module.'''


from contextlib import redirect_stderr
import os
from os.path import abspath, basename, dirname, join
import pandas as pd
#from shutil import copy
from utils import Workflow_Dirs, ingest_samples


# Load and/or make the working directory structure
dirs = Workflow_Dirs(config['work_dir'], 'virus-phage-detect')


# Load sample names and input files 
SAMPLES = ingest_samples(config['samples'], dirs.TMP)


# Specify the location of any external resources and scripts
dirs_ext = config['ext']
dirs_scr = join(dirs_ext, 'scripts')


# --- Workflow output --- #

if config['option'] != '':
    option = '--' + config['option'],
else:
    option = ''


rule all:
	input:
		expand(join(dirs.OUT, 'final_reports','{sample}_quality_summary.tsv'), sample=SAMPLES)


rule metaspades_assembly:
    input:
        fwd = join(dirs.TMP,'{sample}_1.fastq.gz'),
        rev = join(dirs.TMP,'{sample}_2.fastq.gz'),
    output:
        ctg = join(dirs.OUT,'0_metaspades','{sample}','scaffolds.fasta'),
        assembly_graph = join(dirs.OUT,'0_metaspades','{sample}','K55','assembly_graph_with_scaffolds.gfa'),
    log:
        join(dirs.LOG, 'metaspades', '{sample}.out'),
    conda:
        'assemblers',
    threads:
        config['assembly_threads'],
    resources:
        mem_mb = config['assembly_mem_mb'],
    params:
        out_dir = join(dirs.OUT,'0_metaspades','{sample}'),
        option = option,
    shell:
        """
        if [ -f "{params.out_dir}/K33/assembly_graph.fastg" ]; then
            spades.py --only-assembler --meta --restart-from k55 -o {params.out_dir} -t {threads} -m {resources.mem_mb} >> {log} 2>&1 # Restart from k = 55
        elif [ -f "{params.out_dir}/K21/assembly_graph.fastg" ]; then
            spades.py --only-assembler --meta --restart-from k33 -o {params.out_dir} -t {threads} -m {resources.mem_mb} >> {log} 2>&1 # Restart from k = 33
        elif [ -f "{params.out_dir}/corrected.yaml" ]; then
            spades.py --only-assembler --meta --restart-from k21 -o {params.out_dir} -t {threads} -m {resources.mem_mb} >> {log} 2>&1 # Restart from k = 21
        else
            spades.py --only-assembler --meta -t {threads} -m {resources.mem_mb} -1 {input.fwd} -2 {input.rev} -o {params.out_dir} > {log} 2>&1
        fi
        """    


rule viralverify:
	input:
		fwd = join(dirs.TMP,'{sample}_1.fastq.gz'),
		rev = join(dirs.TMP,'{sample}_2.fastq.gz'),
		assembly_graph = join(dirs.OUT,'0_metaspades','{sample}','K55','assembly_graph_with_scaffolds.gfa'),
	output:
		join(dirs.OUT,'1.1_viralverify','{sample}', 'scaffolds.fasta'),
	log:
		join(dirs.LOG, 'viralverify', '{sample}.out'),
	conda:
		'assemblers',
	threads:
		config['assembly_threads'],
	resources:
		mem_mb = config['assembly_mem_mb'],
	params:
		out_dir = join(dirs.OUT,'1.1_viralverify','{sample}'),
		option = option,
	shell:
		"""
		spades.py --metaviral --only-assembler -t {threads} -m {resources.mem_mb} -1 {input.fwd} -2 {input.rev} \
			--assembly-graph {input.assembly_graph} -k55 -o {params.out_dir} > {log} 2>&1 
		"""


rule vibrant:
	# Runs vibrant.
	# input is a set of contigs generated by the assembler in fasta format
	# output is a folder containing temporary files and subfolders with a fasta file containing identified viruses in fasta format
	# to do
		# specify output file that terminates the rule
		# add code that eliminates temporary files that won't be processed
	input:
		join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
	output:
		join(dirs.OUT,  '1.2_vibrant','{sample}','vibrant_detected_viruses.txt'),
	log:                                 
		join(dirs.LOG, 'vibrant', '{sample}.out'),
	conda:
		'vibrant',
	threads: config['vibrant_threads'],
	params:
		out_dir = join(dirs.OUT, '1.2_vibrant','{sample}'),
		vibrant_db = config['vibrant_db'],
	shell:
		"""
		VIBRANT_run.py -i {input} -t {threads} -d {params.vibrant_db} -folder {params.out_dir} > {log} 2>&1
		cat {params.out_dir}/*/*/*fna | grep ">" | sed "s/_fragment_1//g;s/>//g" >  {output}
		"""


rule virsorter:
	# Runs virsorter.
		# input is a set of contigs generated by the assembler in fasta formaT
		# output is a folder containing temporary files and subfolders with a fasta file containing identified viruses in fasta format 
	# to do
		# add code that eliminates temporary files that won't be processed
		# add min_length to correct config files
		# add conda load
	input:
		join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
	output:
		join(dirs.OUT, '1.3_virsorter','{sample}','virsorter_detected_viruses.txt'),
	log:
		join(dirs.LOG, 'virsorter', '{sample}.out'),
	conda:
		join(config['env_yamls'], 'virsorter2.yaml'),
	threads: config['virsorter_threads'],
	params: 
		virsorter2_db = config['virsorter2_db'],
		out_dir = join(dirs.OUT,  '1.3_virsorter','{sample}'),
		min_len = config['min_ctg_len'],
	shell:
		"""
		virsorter run -w {params.out_dir} -d {params.virsorter2_db} -i {input} --min-length {params.min_len} -j {threads} > {log} 2>&1
		cat {params.out_dir}/final-viral-combined.fa | grep ">" | sed "s/_fragment_1//g;s/>//g" | cut -f1 -d "|" > {output}
		"""


rule deepvirfinder:
	# Runs virfinder.
	# input is a set of contigs generated by the assembler in fasta format
	# output is a txt file containing the contig headers of identified viruses 
	# to do
		# add conda load
	input:
		join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
	output:
		join(dirs.OUT, '1.4_virfinder','{sample}','virfinder_detected_viruses.txt'),
	conda:
		'deepvirfinder'
	threads: config['virsorter_threads'],
	params:
		parse_scr = join(dirs_scr, 'virfinder_results_parse.sh'),
		out_dir = join(dirs.OUT, '1.4_virfinder','{sample}'),
	shell:
		"""
		python dvf.py -i {input} -o {params.out_dir} -l 1000 -c {threads}
		bash {params.parse_scr} {params.out_dir}/scaffolds_gt1000bp_dvfpred.txt {output}
		"""


rule genomad:
	# Runs genomad.
	# input is a set of contigs generated by the assembler in fasta format
	# output is a txt file containing the contig headers of identified viruses 
	input:
		join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
	output:
		join(dirs.OUT, '1.5_genomad','{sample}','genomad_detected_viruses.txt'),
	conda:
		'genomad'
	threads: config['genomad_threads'],
	params:
		out_dir = join(dirs.OUT, '1.5_genomad','{sample}'),
		genomad_db = config['genomad_db']
	shell:
		"""
		genomad end-to-end --cleanup {input} {params.out_dir} {params.genomad_db} 
		cut -f1 {params.out_dir}/scaffolds_summary/scaffolds_virus_summary.tsv | cut -d'|' -f1 > {output}
		"""


rule concat_inferences:
	input:
		fa_assembly =     join(dirs.OUT,'0_metaspades','{sample}', 'scaffolds.fasta'),
		fa_viralverify =  join(dirs.OUT,'1.1_viralverify','{sample}','scaffolds.fasta'),
		fa_vibrant = 	  join(dirs.OUT,'1.2_vibrant'    ,'{sample}','vibrant_detected_viruses.txt'),
		fa_virsorter = 	  join(dirs.OUT,'1.3_virsorter',  '{sample}','virsorter_detected_viruses.txt'),
		fa_virfinder = 	  join(dirs.OUT,'1.4_virfinder',  '{sample}','virfinder_detected_viruses.txt'),
		fa_virfinder = 	  join(dirs.OUT,'1.5_genomad',  '{sample}','genomad_detected_viruses.txt'),
	output:
		join(dirs.OUT,'2_dereplication','{sample}','contigs_derep.fa'),
	params:
		out_ids = join(dirs.OUT, '2_dereplication','{sample}','merged_ids.txt'),
		merged_fa = join(dirs.OUT, '2_dereplication','{sample}','tmp_contigs.fa'),
		out_dir =  join(dirs.OUT, '2_dereplication','{sample}'),
		processing_scr  = join(dirs_scr, 'faSomeRecords.py'),
	shell:
		"""
		cat {input.fa_vibrant} {input.fa_virsorter} {input.fa_virfinder} | sort | uniq > {params.out_ids} 
		python {params.processing_scr} -f {input.fa_assembly} -l {params.out_ids} --outfile {params.merged_fa}
		cat {input.fa_viralverify} {params.merged_fa} > {output}
		"""


rule dereplication:
	input:
		join(dirs.OUT,'2_dereplication','{sample}','contigs_derep.fa'),
	output:
		join(dirs.OUT, '2_dereplication','{sample}','contigs_derep_95-70.fna'),
	params:
		cluster_scr = join(dirs_scr, 'Cluster_genomes.pl'),
	shell:
		"""
		{params.cluster_scr} -f {input} -c 70 -i 95
		"""


rule checkv:
	input:
		join(dirs.OUT, '2_dereplication','{sample}','contigs_derep_95-70.fna'),
	output:
		join(dirs.OUT, 'final_reports','{sample}_quality_summary.tsv'),
	log:
		join(dirs.LOG, 'checkv', '{sample}.out'),
	conda:
		'checkv',
	threads: config['checkv_threads'],
	params:
		out_dir = join(dirs.OUT, '3_checkv','{sample}'),
		checkv_db = config['checkv_db'],
	shell:
		"""
		checkv end_to_end {input} {params.out_dir} -t {threads} -d {params.checkv_db} > {log} 2>&1 
		cp {params.out_dir}/quality_summary.tsv {output}
		"""
